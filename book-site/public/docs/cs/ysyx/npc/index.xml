<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NPC on Wenbo&#39;s Study Notes</title>
    <link>http://localhost:1313/notes/docs/cs/ysyx/npc/</link>
    <description>Recent content in NPC on Wenbo&#39;s Study Notes</description>
    <generator>Hugo</generator>
    <language>ch</language>
    <atom:link href="http://localhost:1313/notes/docs/cs/ysyx/npc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/notes/docs/cs/ysyx/npc/nemu%E4%B8%8E%E5%8D%95%E5%91%A8%E6%9C%9Fnpc%E5%9C%A8nemu%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/docs/cs/ysyx/npc/nemu%E4%B8%8E%E5%8D%95%E5%91%A8%E6%9C%9Fnpc%E5%9C%A8nemu%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;0引言&#34;&gt;&#xD;&#xA;  0.引言&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#0%e5%bc%95%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;对于nemu和单周期的npc来说， &lt;code&gt;cpu.pc&lt;/code&gt; 和 &lt;code&gt;void exec_once(Decode *s, vaddr_t pc)&lt;/code&gt; 函数的语义是有一些区别的，因此本文记录一下他们之间的区别。&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-nemu&#34;&gt;&#xD;&#xA;  1. NEMU&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-nemu&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;在使用nemu原生的执行函数 &lt;code&gt;int isa_exec_once(Decode *s)&lt;/code&gt; 时，假设 nemu 还未终止运行且不处于 &lt;code&gt;exec_once&lt;/code&gt; 函数中时(也不处于被它调用的函数中)，&lt;code&gt;cpu.pc&lt;/code&gt;指向是下一条要指向指令的地址。&lt;/p&gt;&#xA;&lt;p&gt;阅读原生执行函数会发现，此时输入命令&lt;code&gt;si&lt;/code&gt; ，可以抽象的将其行为理解成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;计算/获取处理器执行完这条指令应该所处于的状态所需的值，直接将这些值更新到处理器状态中(PC、寄存器、内存)。&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;2-npc&#34;&gt;&#xD;&#xA;  2. NPC&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-npc&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;当使用 &lt;code&gt; npc_exec()&lt;/code&gt; 执行函数时，情况会有所不同，此时输入命令&lt;code&gt;si&lt;/code&gt; ，nemu会：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;将执行完cpu.pc 指向的指令应该所处于的状态所需的值写入处理器状态；&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;获取/计算下一条指令要对处理器更新状态。&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这是因为 verilator 仿真器跑一周期需要如下操作：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// P1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;clock&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;eval();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// P2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;clock&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;eval();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// P3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设处理器会顺序执行指令 I1，I2，I3，假设现在对 I1 执行这些函数。（更准确的说法需要等到介绍cpu.pc对npc的语义）&lt;/p&gt;&#xA;&lt;p&gt;在执行完第二个 &lt;code&gt;eval()&lt;/code&gt;后，会触发一个上升沿，这会立即更新处理器状态，更新到&lt;strong&gt;执行完 I1 的状态&lt;/strong&gt;：PC (I2的PC)、寄存器、内存；然后这会引发仿真器对电路行为的一系列求值 (根据指令I2)，直到收敛为止，即通过新的状态计算下一次的状态，但是并不会更新到处理器的存储器件中。可以想象一下组合逻辑的某个输入更新了，整个电路状态都会根据这个输入而重新计算。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意读/写内存都是由DPI-C模拟的，，假设 I2 是一条 st 指令，在为 I1 执行第二次 &lt;code&gt;eval()&lt;/code&gt; 的时候就会调用这访存的函数！因为访存模块是一个组合逻辑，而第二次执行&lt;code&gt;eval()&lt;/code&gt;时， I2执行的所有状态已经计算出来了，只是还没写入到存储器件里，这当然包括写内存位置的 valid，wen 信号了。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/docs/cs/ysyx/npc/%E4%B8%80%E4%B8%AAdpi-c-bug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/docs/cs/ysyx/npc/%E4%B8%80%E4%B8%AAdpi-c-bug/</guid>
      <description>&lt;h1 id=&#34;一个dpi-c-bug&#34;&gt;&#xD;&#xA;  一个DPI-C bug&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%b8%aadpi-c-bug&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;先看一段 Verilog 模拟处理器在内存(0个周期读延迟)中读取指令的代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;DPI&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;C&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; pure function int  dpi_pmem_read (input int raddr, input logic reset);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; ImemDpi(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;              reset,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;       [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] addr,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt;  [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] inst&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(reset &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; addr) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (reset &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;//$display(&amp;#34; Fetch inst at %h&amp;#34;, addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      inst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dpi_pmem_read(addr,reset);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      inst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&amp;#39;h0000&lt;/span&gt;_0013;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正确的行为上是应该当 &lt;code&gt;reset == 1&lt;/code&gt; 的时候不执行 &lt;code&gt;dpi_pmem_read(addr,reset)&lt;/code&gt; ，但是对于上述代码，无论 &lt;code&gt;reset&lt;/code&gt; 取 &lt;code&gt;0&lt;/code&gt; 还是 &lt;code&gt;1&lt;/code&gt; 都会调用这个函数。主要的原因是在第一行中加了上 &lt;code&gt;pure&lt;/code&gt; 关键词，这会让 verilog 认为这个函数无任何副作用，从而&lt;strong&gt;大概率会生成一个选择器，以 &lt;code&gt;reset&lt;/code&gt; 为选择信号，去选择  &lt;code&gt;dpi_pmem_read(addr,reset)&lt;/code&gt; 和 &lt;code&gt;32&#39;h0000_0013&lt;/code&gt;&lt;/strong&gt; ，而将这个关键词改为 &lt;code&gt;context&lt;/code&gt;则可以让 verilog 知道， 这个函数有副作用，不应该当 &lt;code&gt;reset == 1&lt;/code&gt; 的时候执行。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
